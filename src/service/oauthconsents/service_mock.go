// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package oauthconsents

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	oauthclients "github.com/myminicloud/myminicloud/src/service/oauthclients"

	websessions "github.com/myminicloud/myminicloud/src/service/websessions"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Check provides a mock function with given fields: r, client, session
func (_m *MockService) Check(r *http.Request, client *oauthclients.Client, session *websessions.Session) error {
	ret := _m.Called(r, client, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, *oauthclients.Client, *websessions.Session) error); ok {
		r0 = rf(r, client, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, cmd
func (_m *MockService) Create(ctx context.Context, cmd *CreateCmd) (*Consent, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *Consent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateCmd) (*Consent, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateCmd) *Consent); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Consent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
