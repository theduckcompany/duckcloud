// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package inodes

import (
	context "context"
	hash "hash"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/theduckcompany/duckcloud/src/tools/storage"

	uuid "github.com/theduckcompany/duckcloud/src/tools/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateDir provides a mock function with given fields: ctx, cmd
func (_m *MockService) CreateDir(ctx context.Context, cmd *PathCmd) (*INode, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd) (*INode, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd) *INode); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PathCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFile provides a mock function with given fields: ctx, cmd
func (_m *MockService) CreateFile(ctx context.Context, cmd *CreateFileCmd) (*INode, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFileCmd) (*INode, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFileCmd) *INode); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateFileCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRootDir provides a mock function with given fields: ctx
func (_m *MockService) CreateRootDir(ctx context.Context) (*INode, error) {
	ret := _m.Called(ctx)

	var r0 *INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*INode, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *INode); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, cmd
func (_m *MockService) Get(ctx context.Context, cmd *PathCmd) (*INode, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd) (*INode, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd) *INode); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PathCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDeleted provides a mock function with given fields: ctx, limit
func (_m *MockService) GetAllDeleted(ctx context.Context, limit int) ([]INode, error) {
	ret := _m.Called(ctx, limit)

	var r0 []INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]INode, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []INode); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, inodeID
func (_m *MockService) GetByID(ctx context.Context, inodeID uuid.UUID) (*INode, error) {
	ret := _m.Called(ctx, inodeID)

	var r0 *INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*INode, error)); ok {
		return rf(ctx, inodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *INode); ok {
		r0 = rf(ctx, inodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, inodeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HardDelete provides a mock function with given fields: ctx, inode
func (_m *MockService) HardDelete(ctx context.Context, inode uuid.UUID) error {
	ret := _m.Called(ctx, inode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, inode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Readdir provides a mock function with given fields: ctx, cmd, paginateCmd
func (_m *MockService) Readdir(ctx context.Context, cmd *PathCmd, paginateCmd *storage.PaginateCmd) ([]INode, error) {
	ret := _m.Called(ctx, cmd, paginateCmd)

	var r0 []INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd, *storage.PaginateCmd) ([]INode, error)); ok {
		return rf(ctx, cmd, paginateCmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd, *storage.PaginateCmd) []INode); ok {
		r0 = rf(ctx, cmd, paginateCmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *PathCmd, *storage.PaginateCmd) error); ok {
		r1 = rf(ctx, cmd, paginateCmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterWrite provides a mock function with given fields: ctx, inode, sizeWrite, h
func (_m *MockService) RegisterWrite(ctx context.Context, inode *INode, sizeWrite int, h hash.Hash) error {
	ret := _m.Called(ctx, inode, sizeWrite, h)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *INode, int, hash.Hash) error); ok {
		r0 = rf(ctx, inode, sizeWrite, h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAll provides a mock function with given fields: ctx, cmd
func (_m *MockService) RemoveAll(ctx context.Context, cmd *PathCmd) error {
	ret := _m.Called(ctx, cmd)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *PathCmd) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
