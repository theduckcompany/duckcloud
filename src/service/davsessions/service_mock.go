// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package davsessions

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	storage "github.com/theduckcompany/duckcloud/src/tools/storage"

	uuid "github.com/theduckcompany/duckcloud/src/tools/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// GetAllForUser provides a mock function with given fields: ctx, userID, paginateCmd
func (_m *MockService) GetAllForUser(ctx context.Context, userID uuid.UUID, paginateCmd *storage.PaginateCmd) ([]DavSession, error) {
	ret := _m.Called(ctx, userID, paginateCmd)

	var r0 []DavSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *storage.PaginateCmd) ([]DavSession, error)); ok {
		return rf(ctx, userID, paginateCmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *storage.PaginateCmd) []DavSession); ok {
		r0 = rf(ctx, userID, paginateCmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DavSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *storage.PaginateCmd) error); ok {
		r1 = rf(ctx, userID, paginateCmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
