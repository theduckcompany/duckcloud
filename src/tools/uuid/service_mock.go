// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package uuid

import mock "github.com/stretchr/testify/mock"

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// New provides a mock function with given fields:
func (_m *MockService) New() UUID {
	ret := _m.Called()

	var r0 UUID
	if rf, ok := ret.Get(0).(func() UUID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(UUID)
	}

	return r0
}

// Parse provides a mock function with given fields: _a0
func (_m *MockService) Parse(_a0 string) (UUID, error) {
	ret := _m.Called(_a0)

	var r0 UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (UUID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) UUID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(UUID)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
