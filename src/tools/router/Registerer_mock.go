// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package router

import (
	chi "github.com/go-chi/chi/v5"
	mock "github.com/stretchr/testify/mock"
)

// MockRegisterer is an autogenerated mock type for the Registerer type
type MockRegisterer struct {
	mock.Mock
}

// Register provides a mock function with given fields: r, mids
func (_m *MockRegisterer) Register(r chi.Router, mids Middlewares) {
	_m.Called(r, mids)
}

// String provides a mock function with given fields:
func (_m *MockRegisterer) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockRegisterer creates a new instance of MockRegisterer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterer {
	mock := &MockRegisterer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
