// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package tools

import (
	clock "github.com/Peltoche/neurone/src/tools/clock"
	jwt "github.com/Peltoche/neurone/src/tools/jwt"

	mock "github.com/stretchr/testify/mock"

	response "github.com/Peltoche/neurone/src/tools/response"

	slog "golang.org/x/exp/slog"

	uuid "github.com/Peltoche/neurone/src/tools/uuid"
)

// MockTools is an autogenerated mock type for the Tools type
type MockTools struct {
	mock.Mock
}

// Clock provides a mock function with given fields:
func (_m *MockTools) Clock() clock.Clock {
	ret := _m.Called()

	var r0 clock.Clock
	if rf, ok := ret.Get(0).(func() clock.Clock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(clock.Clock)
		}
	}

	return r0
}

// JWT provides a mock function with given fields:
func (_m *MockTools) JWT() jwt.Parser {
	ret := _m.Called()

	var r0 jwt.Parser
	if rf, ok := ret.Get(0).(func() jwt.Parser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Parser)
		}
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *MockTools) Logger() *slog.Logger {
	ret := _m.Called()

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func() *slog.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// ResWriter provides a mock function with given fields:
func (_m *MockTools) ResWriter() response.Writer {
	ret := _m.Called()

	var r0 response.Writer
	if rf, ok := ret.Get(0).(func() response.Writer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Writer)
		}
	}

	return r0
}

// UUID provides a mock function with given fields:
func (_m *MockTools) UUID() uuid.Service {
	ret := _m.Called()

	var r0 uuid.Service
	if rf, ok := ret.Get(0).(func() uuid.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.Service)
		}
	}

	return r0
}

// NewMockTools creates a new instance of MockTools. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTools(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTools {
	mock := &MockTools{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
