// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package files

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	uuid "github.com/theduckcompany/duckcloud/internal/tools/uuid"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, fileID
func (_m *MockStorage) Delete(ctx context.Context, fileID uuid.UUID) error {
	ret := _m.Called(ctx, fileID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, fileID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByChecksum provides a mock function with given fields: ctx, checksum
func (_m *MockStorage) GetByChecksum(ctx context.Context, checksum string) (*FileMeta, error) {
	ret := _m.Called(ctx, checksum)

	var r0 *FileMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*FileMeta, error)); ok {
		return rf(ctx, checksum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *FileMeta); ok {
		r0 = rf(ctx, checksum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FileMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, checksum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockStorage) GetByID(ctx context.Context, id uuid.UUID) (*FileMeta, error) {
	ret := _m.Called(ctx, id)

	var r0 *FileMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*FileMeta, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *FileMeta); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FileMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, meta
func (_m *MockStorage) Save(ctx context.Context, meta *FileMeta) error {
	ret := _m.Called(ctx, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *FileMeta) error); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
