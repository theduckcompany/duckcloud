// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package files

import (
	context "context"

	afero "github.com/spf13/afero"

	inodes "github.com/theduckcompany/duckcloud/internal/service/inodes"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/theduckcompany/duckcloud/internal/tools/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *MockService) Create(ctx context.Context) (afero.File, uuid.UUID, error) {
	ret := _m.Called(ctx)

	var r0 afero.File
	var r1 uuid.UUID
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (afero.File, uuid.UUID, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) afero.File); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) uuid.UUID); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(uuid.UUID)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: ctx, inod
func (_m *MockService) Delete(ctx context.Context, inod *inodes.INode) error {
	ret := _m.Called(ctx, inod)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inodes.INode) error); ok {
		r0 = rf(ctx, inod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: ctx, fileID
func (_m *MockService) Open(ctx context.Context, fileID uuid.UUID) (afero.File, error) {
	ret := _m.Called(ctx, fileID)

	var r0 afero.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (afero.File, error)); ok {
		return rf(ctx, fileID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) afero.File); ok {
		r0 = rf(ctx, fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
