// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package oauth2

import (
	http "net/http"

	manage "github.com/go-oauth2/oauth2/v4/manage"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// GetFromReq provides a mock function with given fields: r
func (_m *MockService) GetFromReq(r *http.Request) (*Token, error) {
	ret := _m.Called(r)

	var r0 *Token
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*Token, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *Token); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Token)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// manager provides a mock function with given fields:
func (_m *MockService) manager() *manage.Manager {
	ret := _m.Called()

	var r0 *manage.Manager
	if rf, ok := ret.Get(0).(func() *manage.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*manage.Manager)
		}
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
