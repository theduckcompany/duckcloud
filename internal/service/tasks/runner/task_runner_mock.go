// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package runner

import (
	context "context"
	json "encoding/json"

	mock "github.com/stretchr/testify/mock"
)

// MockTaskRunner is an autogenerated mock type for the TaskRunner type
type MockTaskRunner struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *MockTaskRunner) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: ctx, args
func (_m *MockTaskRunner) Run(ctx context.Context, args json.RawMessage) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, json.RawMessage) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTaskRunner creates a new instance of MockTaskRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskRunner(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockTaskRunner {
	mock := &MockTaskRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
