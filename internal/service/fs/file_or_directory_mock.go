// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package fs

import (
	iofs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockFileOrDirectory is an autogenerated mock type for the FileOrDirectory type
type MockFileOrDirectory struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockFileOrDirectory) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: p
func (_m *MockFileOrDirectory) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDir provides a mock function with given fields: n
func (_m *MockFileOrDirectory) ReadDir(n int) ([]iofs.DirEntry, error) {
	ret := _m.Called(n)

	var r0 []iofs.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]iofs.DirEntry, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []iofs.DirEntry); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iofs.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Readdir provides a mock function with given fields: count
func (_m *MockFileOrDirectory) Readdir(count int) ([]iofs.FileInfo, error) {
	ret := _m.Called(count)

	var r0 []iofs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]iofs.FileInfo, error)); ok {
		return rf(count)
	}
	if rf, ok := ret.Get(0).(func(int) []iofs.FileInfo); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iofs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(count)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Seek provides a mock function with given fields: offset, whence
func (_m *MockFileOrDirectory) Seek(offset int64, whence int) (int64, error) {
	ret := _m.Called(offset, whence)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return rf(offset, whence)
	}
	if rf, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = rf(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(offset, whence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stat provides a mock function with given fields:
func (_m *MockFileOrDirectory) Stat() (iofs.FileInfo, error) {
	ret := _m.Called()

	var r0 iofs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (iofs.FileInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() iofs.FileInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iofs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: p
func (_m *MockFileOrDirectory) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFileOrDirectory creates a new instance of MockFileOrDirectory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileOrDirectory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileOrDirectory {
	mock := &MockFileOrDirectory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
