// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package fs

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	inodes "github.com/theduckcompany/duckcloud/internal/service/inodes"
)

// MockFS is an autogenerated mock type for the FS type
type MockFS struct {
	mock.Mock
}

// CreateDir provides a mock function with given fields: ctx, name
func (_m *MockFS) CreateDir(ctx context.Context, name string) (*inodes.INode, error) {
	ret := _m.Called(ctx, name)

	var r0 *inodes.INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*inodes.INode, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *inodes.INode); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inodes.INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockFS) Get(ctx context.Context, name string) (*inodes.INode, error) {
	ret := _m.Called(ctx, name)

	var r0 *inodes.INode
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*inodes.INode, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *inodes.INode); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inodes.INode)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenFile provides a mock function with given fields: ctx, name, flag
func (_m *MockFS) OpenFile(ctx context.Context, name string, flag int) (FileOrDirectory, error) {
	ret := _m.Called(ctx, name, flag)

	var r0 FileOrDirectory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (FileOrDirectory, error)); ok {
		return rf(ctx, name, flag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) FileOrDirectory); ok {
		r0 = rf(ctx, name, flag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FileOrDirectory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, name, flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAll provides a mock function with given fields: ctx, name
func (_m *MockFS) RemoveAll(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rename provides a mock function with given fields: ctx, oldName, newName
func (_m *MockFS) Rename(ctx context.Context, oldName string, newName string) error {
	ret := _m.Called(ctx, oldName, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockFS creates a new instance of MockFS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFS(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFS {
	mock := &MockFS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
