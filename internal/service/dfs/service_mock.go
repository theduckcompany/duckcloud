// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package dfs

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	spaces "github.com/theduckcompany/duckcloud/internal/service/spaces"

	users "github.com/theduckcompany/duckcloud/internal/service/users"

	uuid "github.com/theduckcompany/duckcloud/internal/tools/uuid"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateFS provides a mock function with given fields: ctx, user, owners
func (_m *MockService) CreateFS(ctx context.Context, user *users.User, owners []uuid.UUID) (*spaces.Space, error) {
	ret := _m.Called(ctx, user, owners)

	var r0 *spaces.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *users.User, []uuid.UUID) (*spaces.Space, error)); ok {
		return rf(ctx, user, owners)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *users.User, []uuid.UUID) *spaces.Space); ok {
		r0 = rf(ctx, user, owners)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*spaces.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *users.User, []uuid.UUID) error); ok {
		r1 = rf(ctx, user, owners)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpaceFS provides a mock function with given fields: space
func (_m *MockService) GetSpaceFS(space *spaces.Space) FS {
	ret := _m.Called(space)

	var r0 FS
	if rf, ok := ret.Get(0).(func(*spaces.Space) FS); ok {
		r0 = rf(space)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FS)
		}
	}

	return r0
}

// RemoveFS provides a mock function with given fields: ctx, space
func (_m *MockService) RemoveFS(ctx context.Context, space *spaces.Space) error {
	ret := _m.Called(ctx, space)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *spaces.Space) error); ok {
		r0 = rf(ctx, space)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
