// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package masterkey

import (
	mock "github.com/stretchr/testify/mock"
	secret "github.com/theduckcompany/duckcloud/internal/tools/secret"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Open provides a mock function with given fields: key
func (_m *MockService) Open(key *secret.SealedKey) (*secret.Key, error) {
	ret := _m.Called(key)

	var r0 *secret.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret.SealedKey) (*secret.Key, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(*secret.SealedKey) *secret.Key); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret.SealedKey) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SealKey provides a mock function with given fields: key
func (_m *MockService) SealKey(key *secret.Key) (*secret.SealedKey, error) {
	ret := _m.Called(key)

	var r0 *secret.SealedKey
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret.Key) (*secret.SealedKey, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(*secret.Key) *secret.SealedKey); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.SealedKey)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret.Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
