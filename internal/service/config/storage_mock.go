// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package config

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	secret "github.com/theduckcompany/duckcloud/internal/tools/secret"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// GetKey provides a mock function with given fields: ctx, key
func (_m *MockStorage) GetKey(ctx context.Context, key ConfigKey) (*secret.Key, error) {
	ret := _m.Called(ctx, key)

	var r0 *secret.Key
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ConfigKey) (*secret.Key, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ConfigKey) *secret.Key); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.Key)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ConfigKey) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, key, value
func (_m *MockStorage) Save(ctx context.Context, key ConfigKey, value interface{}) error {
	ret := _m.Called(ctx, key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ConfigKey, interface{}) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
